#집합 함수 사용 시 참고사항
1. NULL 값은 무시하므로 통계에 잡히지 않는다.
2. 만약 값이 없는데 SUM,AVG,MAX,MIN 함수를 사용하면 NULL 값이 된다.
   단 COUNT는 0이 된다.
3. DISTINCT를 집합 함수 안에 사용해서 중복된 값을 제거하고 나서 집합을 구할 수 있다.
   select COUNT(DISTINCT m.age) from Member m
4. DISTINCT를 COUNT에서 사용 때 임베디드 타입은 지원하지 않는다.

#페치 조인의 특징과 한계
 페치 조인을 사용하면 SQL한번으로 연관된 엔티티들을 함께 조회할 수 있어서 SQL호출 횟수를 줄여 성능을 최적화할 수 있다.
 다음처럼 엔티티에 직접 적용하는 로딩 전략은 애플리케이션 전체에 영향을 미쳐 글로벌 로딩 전략이라 부른다. 페치 조인은 글로벌 로딩 전략보다
 우선한다. 예를 들어 글로벌 로딩 전략을 지연 로딩으로 설정해도 JPQL에서 페치 조인을 사용하면 페치 조인을 적용해서 함께 조회한다.

 - 페치 조인 대상에는 별칭을 줄 수 없다.
 - 둘 이상의 컬렉션을 페치할 수 없다.
 - 컬렉션을 페치 조인하면 페이징 API를 사용할 수 없다.
 

#경로 표현식의 용어 정리
1.상태 필드 : 단순히 값을 저장 하기 위한 필드(필드 or 프로퍼티)
2.연관 필드 : 연관관계를 위한 필드, 임베디드 타입 포함(필드 or 프로퍼티)
- 단일 값 연관 필드 : @ManyToOne, @OneToOne, 대상이 엔티티
- 컬렉션 값 연관 필드 : @OneToMany, @ManyToMany, 대상이 컬렉션


#단일 값 연관 필드로 경로 탐색을 하면 SQL 에서 내부 조인이 일어나는데 이것을 묵시적 조인이라 한다.
참고로 묵시적 조인은 모두 내부 조인이며 외부 조인은 명시적으로 JOIN키워드를 사용해야한다.
- 명시적 조인
select m FROM Member m JOIN m.team t
- 묵시적 조인
select m.team FROM Member m

#컬렉션은 컬렉션의 크기를 구할 수 있는 size라는 특별한 기능 사용 가능
size를 사용하면 COUNT 함수로 변환
select t.members.size from Team t


#JPQL도 SQL처럼 서브 쿼리를 지원하지만 WHERE, HAVING 절에서만 사용 가느앟고 SELECT, FROM 절에서는 사용 불가

#ALL | ANY | SOME
- ALL 모든 조건을 만족하면 참
ex)select o from Order o where o.orderAmount > ALL (select p.stockAmount from Product p)
(전체 상품 각각의 재고보다 수문량이 많은 주문들)
- ANY , SOME 같은 의미, 조건을 하나라도 만족하면 참
ex)select m from Member m where m.team = ANY (select t from Team t)
(어떤 팀이든 팀에 소속된 회원)



